@inherits Umbraco.Web.Macros.PartialViewMacroPage
@{

    string mediaIds = string.Empty;

    if (Model.MacroParameters.ContainsKey("Multiple Media Picker"))
    {
        mediaIds = Model.MacroParameters["Multiple Media Picker"] as string;
    }
}


@{
// days = string.IsNullOrEmpty((string) Model.MacroParameters["slider text"]) 
        //? 0 : Convert.ToInt32(Model.MacroParameters["slider text"]);
}

@{
        //var ImageTitle = Model.MacroParameters.ContainsKey["slider text"];

     @*   if (Model.MacroParameters.ContainsKey("slider text"))
        {
        <text> "Its there" </text>
            }
        else
        {
        <text> "Not there" </text>
            } *@

    }

@if (Request.Url.AbsolutePath.Contains("GetMacroResultAsHtmlForEditor"))
{

    <div class="hk_slider hk-homepage-slider">
        @if (mediaIds != null)
        {
            <section class="slider lazy ">
                @foreach (var mediaId in mediaIds.Split(','))
                {
                    var media = Umbraco.TypedMedia(mediaId);

                    @* a single image *@
                if (media.DocumentTypeAlias == "Image")
                {
                    @RenderBackend(media as Image);
                }

                @* a folder with images under it *@
                foreach (var image in media.Children<Image>())
                {
                    @RenderBackend(image);
                    }
                }
            </section>
        }
    </div>
}
else
{

        <div class="hk_slider hk-homepage-slider hk_slider_@Umbraco.Field("titleMain")">
            @if (mediaIds != null)
            {
                <section class="slider lazy ">
                    @foreach (var mediaId in mediaIds.Split(','))
                    {
                        var media = Umbraco.TypedMedia(mediaId);

                        @* a single image *@
                    if (media.DocumentTypeAlias == "Image")
                    {
                        @Render(media as Image);
                    }

                    @* a folder with images under it *@
                    foreach (var image in media.Children<Image>())
                    {




                        @Render(image);


                        }
                    }
                </section>
            }

        </div>


        }

        @helper Render(Image item)
        {
        @* <a href="@item.Url" class="thumbnail"></a>
            <img src="@item.GetCropUrl(width:200, height:200)" alt="@item.Name" />*@
        <div>


            @if (item.HasProperty("sliderTitel"))
            {
                <h2 class='slider titel'>@(item.GetPropertyValue<string>("sliderTitel"))</h2>
            }

            <img src="@item.GetCropUrl(height:350)" data-lazy="@item.GetCropUrl(width:1170, height:425)" alt="@item.Name" title="@item.Name" />
        </div>
}


        @helper RenderBackend(Image item)
        {
   
        <img src="@item.GetCropUrl(width:200, height:200)" alt="@item.Name" />
        
        }
