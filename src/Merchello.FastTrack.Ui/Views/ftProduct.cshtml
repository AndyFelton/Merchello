@inherits Merchello.Web.Mvc.MerchelloViewPage<Merchello.Web.Models.VirtualContent.IProductContent>
@using Merchello.FastTrack.Ui
@using Merchello.Web
@using Merchello.Web.Models
@using Merchello.Web.Models.Ui.Rendering
@using Merchello.Web.Models.VirtualContent
@{
	Layout = "Master.cshtml";
	// the Model passed here is IProductContent (virtual content) that is not generated by the Models Builder.
	// However, it is a Typed IPublishedContent model that exposes product properties such as Price, SalePrice, etc.
	// and the properties from the ContentType that was attached to the product in Merchello's back office.
	// These can be accessed in the same way as any normal IPublishedContent property e.g. GetPropertyValue
}

@*
    @Html.Partial("_Headline")
*@
<div class="container-fluid container hk_collections hk_product ">
    <div class="row">
        <div class="col-12 col-md-12 column"> @* col-md-pull-4 *@
            <div class="row">
    @if (Model.HasValue("ftProduct_Afbeelding"))
    {
        var mediaId = Model.GetPropertyValue<string>("ftProduct_Afbeelding");
        var image = Umbraco.TypedMedia(mediaId);
        <div class="col-md-6 col-xs-12 column hk_product_slider">
            <div class="item">
                <div class="clearfix" style="max-width:474px;">
                    <ul id="image-gallery" class="gallery list-unstyled">
                        <li data-thumb="@image.GetCropUrl(150, 150)" data-src="@image.GetCropUrl(900, 750)"> @* data-lity hier te gebruiken *@
                            <img class="img-responsive" src="@image.GetCropUrl(900, 750)" alt="@Model.Name">@* .GetCropUrl(height: 450) *@
                        </li>
                        <li data-thumb="@image.GetCropUrl(150, 150)" data-src="@image.GetCropUrl(900, 750)">
                            <img class="img-responsive" src="@image.GetCropUrl(900, 750)" alt="@Model.Name">@* .GetCropUrl(height: 450) *@
                        </li>
                        <li data-thumb="@image.GetCropUrl(150, 150)" data-src="@image.GetCropUrl(900, 750)">
                            <img class="img-responsive" src="@image.GetCropUrl(900, 750)" alt="@Model.Name">@* .GetCropUrl(height: 450) *@
                        </li>
                        <li data-thumb="@image.GetCropUrl(150, 150)" data-src="@image.GetCropUrl(900, 750)">
                            <img class="img-responsive" src="@image.GetCropUrl(900, 750)" alt="@Model.Name">@* .GetCropUrl(height: 450) *@
                        </li>
                    </ul>
                </div>
            </div>
        </div>
                }
                <div class="col-md-6 col-xs-12 column">
                    <h2>/&nbsp;&nbsp;&nbsp;@Model.Name</h2>
                    <p>@Html.Raw(Model.GetPropertyValue<string>("ftProduct_eenzinomschr")) - <strong>De omschrijving uit de import hier nog plaatsen?</strong> Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.  </p>
                    @Categories(Model)
                    <div class="col-12 col-md-12 column">
                        @Html.Action("AddProductToBasketForm", "StoreBasket", new { area = "Merchello", model = Model })
                    </div>

                    <div class="hk_product_specs">
                        <button type="button" class="btn btn-primary" data-toggle="collapse" data-target="#specs">show specification <i class="fas fa-plus"></i></button>
                        <ul id="specs" class="collapse">
                            <li class="hk_row_specs">
                                <strong>EAN code</strong>: @Html.Raw(Model.GetPropertyValue<string>("ftProduct_EAN"))
                            </li>
                            @*<li class="hk_row_specs">
                                <strong>Afmetingen</strong>: @(Model.GetPropertyValue<string>("ftProduct_Naam"))
                            </li>*@
                            <li class="hk_row_specs">
                                <strong>product code</strong>:  @(Model.GetPropertyValue<string>("ftProduct_Artikelnummer"))
                            </li>
                            <li class="hk_row_specs">
                                <strong>afmetingen</strong>: @Html.Raw(Model.GetPropertyValue<string>("ftProduct_afmetingen"))
                            </li>
                            @if (Model.HasValue("ftProduct_ExpDelivery"))
                                    {
                                <li class="hk_row_specs">
                                    <strong>expected delivery</strong>: @(Model.GetPropertyValue<DateTime>("ftProduct_ExpDelivery"))
                                </li>
                            }

                            @*<li class="hk_row_specs">
                                @(Model.GetPropertyValue<string>("ftProduct_Unit"))
                            </li>*@
                            @if (Model.HasProperty("relatedProducts") && Model.HasValue("relatedProducts"))
                                    {
                                <li class="hk_row_specs related-products">
                                    <h3>Related Products</h3>
                                    @Html.Partial("_ProductBoxList", Model.GetPropertyValue<IEnumerable<IProductContent>>("relatedProducts"))
                                </li>

                            }
                        </ul>

                    </div>
                </div>
            </div>
            <hr />
        </div>

        </div>
</div>
    @*@foreach (var variant in Model.ProductVariants)
        {
            <h3>@variant.Name</h3>
            <table class="table table-striped">
                <tr>
                    <td>Name</td>
                    <td>Has content</td>
                    <td>Body text</td>
                </tr>
                @foreach (var att in variant.Attributes)
                {
                    <tr>
                        <td><b>@att.Name</b></td>
                        <td>@variant.AttributeHasContent(att)</td>
                        <td style="background-color: #eee">
                            @if (variant.AttributeHasContent(att))
                            {
                                var content = variant.GetContentForAttribute(att);
                                if (content != null)
                                {
                                    var html = content.GetPropertyValue<IHtmlString>("bodyText");
                                    @html
                                }
                            }
                        </td>
                    </tr>
                }
            </table>
        }*@

    @helper Categories(IProductContent product)
    {
var collections = product.Collections().ToArray();
if (collections.Any())
{
    var pages = new List<Tuple<IProductCollection, IPublishedContent>>();
    foreach (var col in collections)
    {
        var page = ExampleUiHelper.Content.GetCategoryPageForCollection(col.Key);
        if (page != null)
        {
            pages.Add(new Tuple<IProductCollection, IPublishedContent>(col, page));
        }
    }
    var needsComma = false;
        <small>
            Categories:
            @foreach (var pc in pages)
            {
                @Umbraco.If(needsComma, ",") <a href="@pc.Item2.Url">@pc.Item1.Name</a>
                needsComma = true;
            }
        </small>
}
}
